<style type="text/css">
	body {
		margin: 0px;
		padding: 0px;
	}
	.wrapper {
		width: 960px;
		margin: 58px auto 0px auto;
		min-height: 640px;
	}
	.main {
		width: 960px;
		min-height: 640px;
	}
	ul li {
		list-style: none;
	}
	.nav {
		border: 1px solid gray;
		height: 58px;
		line-height: 58px;
		top: 0px;
		right: 0px;
		position: fixed;
		width: 100%;
		margin-bottom: 80px;
		background-color: ;
		z-index: 1000;
	}
	
</style>

<div class="nav">
	<ul>
		<li></li>
		<li></li>
	</ul>
</div>
<div class="wrapper">
	<div class="main">
		Git总结
一、安装git
1. 查看yum源中git版本：yum list  | grep git
2. yum install -y git（-y参数表示对于选择yes/no的问题总是yes）
3. 查看git版本：git –version
二、git版本控制器介绍
1. 速度
2. 简单的设计
3. 对分支开发模式的强力支持
4. 完全分布式(区别与SVN)
5. 最初是用来管理linux内核代码

三、git的原理
1. 通过追踪不同阶段文件的变化来做版本控制
2. 传统的版本控制器，是以打补丁的方式去追踪文件变化，如图：

3. git使用的是保存快照，来追踪文件的变化
	     如果想要回溯到某个版本，可以直接获取，对于下图中每一个版本都是独立的，
	    Version2中的C和Versin3中的A1都是保存的快照，也就是上一个版本的链接；而对与
	    传统的版本控制系统，想要获取某个版本就需要在原有版本的基础之上打对应的补丁，效率
	   很低。
	

4. 几乎所有操作都是在本地执行
5. 通过“校验和”算法识别文件变化
1. git使用SHA-1算法对文件内容和目录结构进行哈希运算，用得出的校验值作为识别变化的指纹
6. 文件状态和工作区域
1）Working Directory	  工作区（增加、编辑、修改的操作）
	     2）Staging area			暂存区
	     3）Git repository			仓库（最终确定的文件保存到仓库，成为一个新版本）
四、git的基础设置
1. 设置用户名称
	git config --global user.name "lileichinasoft"
2. 设置用户邮箱
	git config --global user.email "lileichinasoft@gmail.com"
3. 查看git设置
	git config --list
五、初始化一个git仓库
1. 创建一个文件夹：mkdir gitDemo
2. cd gitDemo	（工作区域）
3. git init
4. ls -a会看到有一个隐藏的.gitignore文件夹，这里就是追踪git版本变化的仓库
5. git status	查看git状态
6. 在工作区域中加入两个文件
	touch README
	vim hellogit.rb
7. 再通过git status查看工作区域状态，说是有两个未追踪的文件
8. 如果想要将上面两个文件加入到git仓库，需要两步：
	先要将文件加入到暂存区域
	git add README
	git add hellogit.rb
	使用git status查看，说是有两个新文件，缓存在暂存区域
	
	将暂存区域中的内容提交到git仓库
	git commit -m "Add files: README and hellogit.rb"
	
	在通过git status查看，会提示说：working directory clean
9. 查看git提交的log
	通过git log查看提交的日志
	commit:就是前面说的通过SHA-1算法，得出的指纹
	Author:提交的作者
	Date:提交时间
	
10. 将文件从暂存区域移除，也就是说文件会被移到工作区域
	git rm --cached <file> ...
	git reset HEAD <file> ...
	
11. 可以让git自动完成”暂存且提交”的操作
	git commit -a -m "modify file README"	
	-a：可以让git自动完成暂存且提交的操作
	查看commit帮组：git help commit
	文档：”Tell the command to automatically stage files that have been modified and deleted, but new files you have not told git about are not affected."
	注意：	未追踪的文件，是无法使用-a参数去自动暂存且提交的。

12. 删除文件的操作（只是从当前版本中删除了此文件，历史版本中依然存在）
	1）rm <file>		先从物理磁盘上删除
	2）git rm <file>	告诉git要从仓库当前版本中删除对文件的追踪
	3）git commit -m "rm comment"	提交到git仓库
	上面的删除也可以使用-a参数，在执行完成第一步之后，直接使用：
	git commit -a -m 'remove file'	让git自己完成“暂存更新和提交”的操作

13. 重命名文件
	1）git mv hellogit.rb helloworld.rb
	2）git commit -m 'rename hellogit.rb => helloworld.rb'
	git mv命令实际上在git内部，所做的操作是这样的（和上面的步骤1等价）：
	mv hellogit.rb helloworld.rb
	git rm hellogit.rb
	git add helloworld.rb
	
六、git远程仓库
1. Git远程仓库实现代码的集中话管理

2. git远程仓库
	   git远程仓库其实是保存了.git仓库文件
	
3. git远程仓库访问协议
	local
	ssh
	git
	http/https
	
4. git远程仓库实现

	介绍一个linux下增强终端的插件：ZSH；直接上图
七、配置将代码推到github上
1. 注册github帐号
2. 创建SSH密钥：https://help.github.com/articles/generating-ssh-keys
3. 创建新仓库（注意，不要选择使用README文件初始化仓库）
4. git remote add origin git@github.com:<username>/first_app.git
5. git push -u origin master
6. 





	</div>
</div>